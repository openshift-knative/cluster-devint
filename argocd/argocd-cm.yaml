apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-cm
data:
  resource.customizations: |
    operators.coreos.com/CatalogSourceConfig:
      health.lua: |
        hs = {}
        if obj.status ~= nil then
          if obj.status.currentPhase ~= nil then
            if obj.status.currentPhase.phase ~= nil then
              hs.status = "Progressing"
              hs.message = obj.status.currentPhase.phase.message
              if obj.status.currentPhase.phase.name == "Succeeded" then
                hs.status = "Healthy"
              end
              return hs
            end
          end
        end
        hs.status = "Progressing"
        hs.message = "Waiting for catalog source config"
        return hs
    operators.coreos.com/Subscription:
      health.lua: |
        hs = {}
        if obj.status ~= nil then
          if (obj.status.state == "AtLatestKnown" || obj.status.state == "UpgradePending") and obj.status.installedCSV ~= nil then
            hs.status = "Healthy"
            hs.message = ""
            return hs
          end
        end
        hs.status = "Progressing"
        hs.message = "Waiting for subscription"
        return hs
    maistra.io/ServiceMeshMemberRoll:
      health.lua: |
        hs = {}
        if obj.status ~= nil then
          if obj.status.configuredMembers ~= nil then
            hs.status = "Healthy"
            hs.message = ""
            return hs
          end
        end
        hs.status = "Progressing"
        hs.message = "Waiting for service mesh member roll"
        return hs
    serving.knative.dev/KnativeServing:
      health.lua: |
        hs = {}
        if obj.status ~= nil then
          if obj.status.conditions ~= nil then
            for i, condition in ipairs(obj.status.conditions) do
              if condition.type == "Ready" and condition.status == "True" then
                hs.status = "Healthy"
                hs.message = condition.message
                return hs
              end
            end
          end
        end
        hs.status = "Progressing"
        hs.message = "Waiting for knative serving"
        return hs
    cloudcredential.openshift.io/CredentialsRequest:
      health.lua: |
        hs = {}
        if obj.status ~= nil then
          if obj.status.provisioned then
            hs.status = "Healthy"
            hs.message = ""
            return hs
          end
        end
        hs.status = "Progressing"
        hs.message = "Waiting for credentials request"
        return hs
